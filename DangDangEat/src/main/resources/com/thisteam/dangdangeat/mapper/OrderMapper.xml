<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<!-- mapper 태그 내에 namespace 속성 지정 후 Mapper 인터페이스 위치 지정 -->
<mapper namespace="com.thisteam.dangdangeat.mapper.OrderMapper">
	
	<!--               주문/결제 작업                -->
	
	<!--  1-(1). 주문서에 회원의 정보를 가져오는 메서드 -->
	<select id="selectMemberList" resultType="com.thisteam.dangdangeat.vo.MemberVO">
		SELECT *
		 	FROM member 
		 	WHERE member_id = #{id}
	</select>
	<!--  1-(2). 주문서에 장바구니 결제 상품 정보를 가져오는 메서드 -->
	<select id="selectCartList" resultType="com.thisteam.dangdangeat.vo.CartProductVO">
		SELECT * 
			FROM cart_view
			WHERE
				member_id = #{id}
				AND pro_code = #{pro_code} 
	</select>
	
	<!-- 2-(1). 복수데이터 처리를 위한 주문번호 조회 구문 -->
	<select id="getOrderCode" resultType="int">
		SELECT MAX(order_code)
				FROM orders WHERE member_id = #{id}
	</select>
	
	<!-- 2-(1). 주문자 정보 등록 구문 (orders) -->
	<insert id="insertOrder">
		<selectKey keyProperty="order_code" resultType="integer" order="BEFORE">
			SELECT MAX(order_code)
				FROM orders 
		</selectKey>
		INSERT 
			INTO orders
			VALUES (
				(#{order_code} + 1)
				, #{id}
				, #{order.order_name}
				, #{order.order_postcode}
				, #{order.order_address1}
				, #{order.order_address2}
				, #{order.order_mobile}
				, #{order.order_comment}
				,0
				,now()			
			)
	</insert>
	
	<!-- 2-(1). 주문상품 등록 구문 (order_product) -->
	<insert id="insertOrderProduct">
		INSERT
			INTO order_product 
			VALUES
				(#{orderProduct.order_code}, #{orderProduct.pro_code}, #{orderProduct.order_stock})
	</insert>
	
<!-- 	<insert id="insertOrderProduct"> -->
<!-- 		<selectKey keyProperty="order_code" resultType="integer" order="BEFORE"> -->
<!-- 			SELECT o.order_code -->
<!-- 				FROM orders o NATURAL JOIN cart c -->
<!-- 				WHERE o.member_id = #{id} AND c.pro_code = #{orderProduct.pro_code} -->
<!-- 				AND c.cart_amount = #{orderProduct.order_stock} AND o.order_status = 0 -->
<!-- 		</selectKey> -->
<!-- 		INSERT -->
<!-- 			INTO order_product  -->
<!-- 			VALUES -->
<!-- 				(#{order_code}, #{orderProduct.pro_code}, #{orderProduct.order_stock}) -->
<!-- 	</insert> -->
	
	
	<!-- 2-(2). 주문자 정보 리스트 (출력용) -->
	<select id="selectOrderMemberList" resultType="com.thisteam.dangdangeat.vo.OrdersBeanVO">
		SELECT *
			FROM orders 
			WHERE order_code = #{order_code}	
				  AND member_id = #{id} 
				  AND order_status = 0
	</select>
	
	<!-- 2-(3). 주문상품 정보 리스트 (출력용) -->
	<select id="selectOrderProductList" resultType="com.thisteam.dangdangeat.vo.CartProductVO">
		SELECT *
			FROM cart_view
			WHERE member_id = #{id} AND pro_code = #{pro_code}
	</select>
	
	<!-- 2-(4). 주문 상태가 0인 경우(=미완료) orders 테이블에서 삭제 (= 중복 데이터 방지) -->
	<delete id="deleteUncompleteOrder">
		DELETE FROM orders 
			WHERE order_status = 0 AND member_id = #{id}
	</delete>
	
	<delete id="deleteUncompletedProduct">
		DELETE FROM order_product
			WHERE order_code = (SELECT order_code FROM 
				 					(SELECT op.order_code FROM orders o NATURAL JOIN order_product op
									 WHERE o.order_code = op.order_code AND member_id = #{id} AND o.order_status = 0) 
							    AS tempTable GROUP BY order_code)
	</delete>
	
	<!-- 2-(5). 주문금액 합 계산하는 구문 -->
	<select id="getTotalPrice" resultType="int">
	SELECT SUM(op.order_stock * p.pro_price) AS total
		FROM order_product op NATURAL JOIN product p 
		WHERE order_code = #{order_code}
	</select>
	
	<!-- 3. 결제 페이지 : 쿠폰 페이지에서 받아온 쿠폰 코드로 할인금액 계산 -->
	<select id="selectCouponDiscountPrice" resultType="integer">
		SELECT TRUNCATE 
				((#{pro_amount} * 
				(SELECT cp_discount_value 
		 			FROM coupon 
		 			WHERE cp_code = #{cp_code}) / 100 ), 0)
		 		FROM orders WHERE order_code = #{order_code}
	</select>
	
	<!-- 3. 결제 페이지 : 최대 할인금액 계산 -->
	<select id="selectCouponMaxDiscountPrice" resultType="integer">
		SELECT cp_max_discount 
 			FROM coupon
 			WHERE cp_code = #{cp_code}
	</select>
	
	<!-- 4. 주문확인서 생성 및 결제 작업 진행 비즈니스 로직 -->
	
	<!-- 4-(1). 주문 테이블의 order_status = 1로 변경 시키기 -->
	<update id="UpdateOrderStatus">
		UPDATE orders
			 SET order_status = 1 
			 WHERE order_code = #{order_code} AND member_id = #{id}
	</update> 
	
	<!-- 4-(2). 결제 테이블에 정보 입력 -->
	<insert id="paymentInsertPro">
		INSERT INTO payments
			VALUES (
				#{pay_number},
				#{payments.order_code},
				#{pay_amount},
				#{payments.cp_code},
				#{payments.cp_discount_amount}
			)
	</insert>
	
	<!-- 4-(3). 결제완료시 상품 테이블에서 수량변경 -->
	<update id="UpdateProductQty">
		UPDATE product 
			SET pro_qty = 
						((SELECT pro_qty FROM 
							(SELECT pro_qty, pro_code FROM product) AS pro_update_sample 
								WHERE pro_code = #{pro_code}) 
						- (SELECT order_stock FROM order_product 
							WHERE order_code = #{order_code} AND pro_code = #{pro_code})) 
						WHERE pro_code = #{pro_code}
				
	</update>
	
	<!-- 4-(4). 카트에서 주문한 상품 삭제 -->
	<delete id="DeleteCart">
		DELETE FROM cart
			WHERE member_id = #{id} AND pro_code = #{pro_code}
	</delete>
	
	<!-- 4-(5). 사용한 쿠폰 mc_used = 'N' > 'Y' -->
	<update id="updateCouponStatusE">
		UPDATE member_coupon_view 
			SET mc_used = 'Y' 
			WHERE (cp_code, member_id, cp_target) = (#{payments.cp_code}, #{id} , 'event')
	</update>
	<update id="updateCouponStatusM">
		UPDATE member_coupon_view 
			SET mc_used = 'Y' 
			WHERE (cp_code, member_id, cp_target) = (#{payments.cp_code}, #{id} , 'new_member')
	</update>
	
	<!-- 4-(6). 결제 정보 리스트 생성 -->
	<select id="SelectOrderPaymentsList" resultType="com.thisteam.dangdangeat.vo.PaymentsVO">
		SELECT * FROM payments
		 	WHERE pay_number = #{pay_number} AND order_code = #{order_code}
	</select>
	
	<!-- 4-(7). 결제 상품 정보 리스트 생성  -->
	<select id="selectPaymentProductList" resultType="com.thisteam.dangdangeat.vo.CartProductVO">
		SELECT * FROM cart_view 
			WHERE member_id = #{id} AND pro_code = #{pro_code}
	</select>	
	
	<!-- 4-(8). 배송 정보 및 주문자 정보 리스트 생성  -->
	<select id="selectOrderPaymentInfoList" resultType="com.thisteam.dangdangeat.vo.OrdersBeanVO">
		SELECT * FROM orders 
			WHERE order_code = #{order_code} AND member_id = #{id}
	</select>
	
	
	<!--               주문/결제 작업                -->
</mapper>














